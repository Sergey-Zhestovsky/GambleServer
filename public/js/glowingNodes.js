"use strict";window.GlowingNodes=function(i){var t,s,d,c,n,o,e,r,h,a,l,v,g,y=0;t=i.wrapper,s=i.canvas;var u=i.nodeConnectionDistance;d=void 0===u?100:u;var w=i.sublingLimit;c=void 0===w?10:w;var m=i.nodeMargin;n=void 0===m?65:m;var f=i.nodeMaxSpread;o=void 0===f?50:f;var b=i.visionRadious;e=void 0===b?300:b;var x=i.nodeSpeed;r=void 0===x?550:x;var M=i.colorScheme;h=void 0===M?{node:"8, 6, 34",connection:"8, 6, 34"}:M;var p,Y=i.initialPosition;function P(i,t){this.anchorX=i,this.anchorY=t,this.x=Math.random()*(i-(i-o))+(i-o),this.y=Math.random()*(t-(t-o))+(t-o),this.vx=2*Math.random()-1,this.vy=2*Math.random()-1,this.energy=100*Math.random(),this.radius=Math.random(),this.siblings=[],this.brightness=0}function S(i,t){return Math.sqrt(Math.pow(i.x-t.x,2)+Math.pow(i.y-t.y,2))}function N(){s.width=window.innerWidth,s.height=window.innerHeight}function q(i){g.x=i.clientX,g.y=i.clientY+window.scrollY}initialPosition=void 0===Y?{}:Y,t=document.querySelector(t),s=document.querySelector(s),l=2*Math.PI,v=[],N(),g={x:initialPosition.x||void 0,y:initialPosition.y||void 0},a=s.getContext("2d"),P.prototype.drawNode=function(){var i="rgba(".concat(h.node,", ")+this.brightness+")";a.beginPath(),a.arc(this.x,this.y,2*this.radius+2*this.siblings.length/c,0,l),a.fillStyle=i,a.fill()},P.prototype.drawConnections=function(){for(var i=0;i<this.siblings.length;i++){var t=S(this,this.siblings[i]);if(!(d<t)){var n="rgba(".concat(h.connection,", ")+this.brightness+")";a.beginPath(),a.moveTo(this.x,this.y),a.lineTo(this.siblings[i].x,this.siblings[i].y),a.lineWidth=1-t/d,a.strokeStyle=n,a.stroke()}}},P.prototype.moveNode=function(){this.energy-=1,this.energy<1&&(this.energy=100*Math.random(),this.x-this.anchorX<-o?this.vx=2*Math.random():this.x-this.anchorX>o?this.vx=-2*Math.random():this.vx=4*Math.random()-2,this.y-this.anchorY<-o?this.vy=2*Math.random():this.y-this.anchorY>o?this.vy=-2*Math.random():this.vy=4*Math.random()-2),this.x+=this.vx*this.energy/r,this.y+=this.vy*this.energy/r},p=0,document.addEventListener("resize",N,!1),t.addEventListener("mousemove",q,!1),document.addEventListener("scroll",function(i){0!=p&&p!=window.scrollY&&(g.y+=window.scrollY-p),p=window.scrollY},!0),function(){a.clearRect(0,0,s.width,s.height),v=[];for(var i=n;i<s.width;i+=n)for(var t=n;t<s.height;t+=n)v.push(new P(i,t)),y++}(),function i(){var t,n,o;for(N(),a.clearRect(0,0,s.width,s.height),function(){for(var i,t,n,o=0;o<y;o++){(i=v[o]).siblings=[];for(var s=0;s<y;s++)if(i!==(t=v[s])&&(n=S(i,t))<d)if(i.siblings.length<c)i.siblings.push(t);else{for(var e,r=0,h=0,a=0;a<c;a++)h<(r=S(i,i.siblings[a]))&&(h=r,e=a);n<h&&(i.siblings.splice(e,1),i.siblings.push(t))}}}(),t=0;t<y;t++)n=v[t],o=S({x:g.x,y:g.y},n),n.brightness=o<e?1-o/e:0;for(t=0;t<y;t++)(n=v[t]).brightness&&(n.drawNode(),n.drawConnections()),n.moveNode();requestAnimationFrame(i)}()};
//# sourceMappingURL=data:application/json;charset=utf8;base64,

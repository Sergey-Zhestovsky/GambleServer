"use strict";function _classCallCheck(t,s){if(!(t instanceof s))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,s){for(var e=0;e<s.length;e++){var i=s[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,s,e){return s&&_defineProperties(t.prototype,s),e&&_defineProperties(t,e),t}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var PageController=function(){function f(t){var s=t.block,e=t.maxPages,i=t.schema,a=void 0===i?{}:i,o=t.buttonExpansion,c=void 0===o?1:o,n=t.currentPosition,r=void 0===n?1:n;_classCallCheck(this,f),this.block=s,this.maxPages=Math.max(e,1),this.schema={};var u=a.previous;this.schema.previous=void 0===u?{}:u;var h=a.next;this.schema.next=void 0===h?{}:h;var l=a.current;this.schema.current=void 0===l?{}:l;var v=a.defaultBlock;this.schema.defaultBlock=void 0===v?{}:v;var d=a.separator;this.schema.separator=void 0===d?{}:d,this.buttonExpansion=c,this.currentPosition=r,this.subscribeStack=new Set,this.create()}return _createClass(f,[{key:"create",value:function(t,s){this.setPageBlock(t,s),this.setListner()}},{key:"setPageBlock",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.currentPosition,s=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.maxPages;this.maxPages=s,this.CurrentPosition=t,this.block.html(this.constructButtons(this.createNumericButtons())),this.block.find("div[data-goto]").each(function(){this.goto=Number($(this).attr("data-goto"))})}},{key:"setListner",value:function(){var r,u=this,i=function t(s){var e=s.target;if(0!=u.subscribeStack.size){u.block.off("click","div[data-goto]",t),h.counter=u.subscribeStack.size,h.result=!0,r=e.goto;var i=!0,a=!1,o=void 0;try{for(var c,n=u.subscribeStack[Symbol.iterator]();!(i=(c=n.next()).done);i=!0){(0,c.value)(e.goto,h)}}catch(t){a=!0,o=t}finally{try{i||null==n.return||n.return()}finally{if(a)throw o}}}},h=function t(s,e){t.counter--,t.result=!s&&(t.result&&e),0==t.counter&&(t.result?u.create(r,t.result):u.block.on("click","div[data-goto]",i))};this.block.on("click","div[data-goto]",i)}},{key:"createNumericButtons",value:function(){for(var t=[],s=this.currentPosition-this.buttonExpansion<1?1:this.currentPosition-this.buttonExpansion,e=this.currentPosition+this.buttonExpansion>this.maxPages?this.maxPages:this.currentPosition+this.buttonExpansion,i=s;i<=e;i++)t.push(i);return t.includes(1)||(t=a([1],t)),t.includes(this.maxPages)||(t=a(t,[this.maxPages])),t;function a(t,s){return t[t.length-1]+1!==s[0]&&t.push(null),t.concat(s)}}},{key:"constructButtons",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],s="",e=this.schema.previous.class||this.schema.defaultBlock.class||"",i=this.schema.next.class||this.schema.defaultBlock.class||"";1==this.currentPosition?s+='<div class="'.concat(this.schema.separator.class||"",'">').concat(this.schema.previous.value||"Previous","</div>"):s+='<div class="'.concat(e,'" data-goto="').concat(this.currentPosition-1,'">').concat(this.schema.previous.value||"Previous","</div>");for(var a=0;a<t.length;a++)this.currentPosition==t[a]?s+='<div class="'.concat(this.schema.current.class||"",'">').concat(t[a],"</div>"):null==t[a]?s+='<div class="'.concat(this.schema.separator.class||"",'">').concat(this.schema.separator.value||"...","</div>"):s+='<div class="'.concat(this.schema.defaultBlock.class||"",'" data-goto="').concat(t[a],'">').concat(t[a],"</div>");return this.currentPosition==this.maxPages?s+='<div class="'.concat(this.schema.separator.class||"",'">').concat(this.schema.next.value||"Next","</div>"):s+='<div class="'.concat(i,'" data-goto="').concat(this.currentPosition+1,'">').concat(this.schema.next.value||"Next","</div>"),s}},{key:"subscribe",value:function(t){this.subscribeStack.add(t)}},{key:"unsubscribe",value:function(t){this.subscribeStack.delete(t)}},{key:"CurrentPosition",get:function(){return this.currentPosition},set:function(t){t>this.maxPages?this.currentPosition=this.maxPages:this.currentPosition=t}}]),f}();exports.default=PageController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _tableController=_interopRequireDefault(require("/js/module/tableController.js")),_connector=_interopRequireDefault(require("/js/module/connector.js"));function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _get(t,e,r){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=_superPropBase(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(r):o.value}})(t,e,r||t)}function _superPropBase(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=_getPrototypeOf(t)););return t}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var ServerConnector=function(t){function c(t){var e,r=t.path,n=t.tableConfig,o=t.actions,i=void 0===o?{}:o,a=t.relatedData,s=t.signRequests,l=t.customEvents,u=void 0===l?{}:l;return _classCallCheck(this,c),(e=_possibleConstructorReturn(this,_getPrototypeOf(c).call(this,{signRequests:s}))).path=r,e.tableConfig=n,e.actions=i,e.relatedData=a,e.customEvents=u,e.table,e.eventList=new Map,e.create(),e}return _inherits(c,_connector.default),_createClass(c,[{key:"create",value:function(){var l=this;if(this.actions.get){var t=[this.actionRequest("get",{length:this.tableConfig.selector.dataStep[0],padding:0})];this.relatedData&&this.getRelatedData(this.relatedData,t),Promise.all(t).then(function(t){if(l.relatedData){var e=1,r=!0,n=!1,o=void 0;try{for(var i,a=l.relatedData[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var s=i.value;l.tableConfig[s.to].relatedData||(l.tableConfig[s.to].relatedData=[],l.tableConfig[s.to].relatedData[s.name]=s.storeVariable?t[e++][s.storeVariable]:t[e++])}}catch(t){n=!0,o=t}finally{try{r||null==a.return||a.return()}finally{if(n)throw o}}}l.connectToTableController(t[0])}).catch(function(t){console.error(new Error("ServerConnector"),t)})}}},{key:"getRelatedData",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[],r=!0,n=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var s=i.value;e.push(this.request(s.path,s.options))}}catch(t){n=!0,o=t}finally{try{r||null==a.return||a.return()}finally{if(n)throw o}}return e}},{key:"connectToTableController",value:function(t){this.tableConfig=Object.assign(this.tableConfig,t),(this.tableConfig.connector=this).table=new _tableController.default(this.tableConfig),this.setTableListners()}},{key:"setTableListners",value:function(){for(var t=["get","add","edit","delete"],e=0;e<t.length;e++){var r=t[e];this.actions[r]&&this.tableDataListner(r,this.actionRequest.bind(this,r))}}},{key:"actionRequest",value:function(t,e){return this.request(this.path+this.actions[t].path,e)}},{key:"customEventRequest",value:function(t,e,r){if(!this.customEvents[t])return r("wrong path");var n=this.cancelableRequest(this.path+this.customEvents[t],e);return n.request.then(function(t){r(null,t)}).catch(function(t){r(t)}),n}},{key:"request",value:function(t,e){return _get(_getPrototypeOf(c.prototype),"straightRequest",this).call(this,t,e)}},{key:"cancelableRequest",value:function(t,e){return _get(_getPrototypeOf(c.prototype),"request",this).call(this,t,e)}},{key:"tableDataListner",value:function(r,n){var o=this;this.table.on(r,function(t,e){n(t).then(function(t){o.triggerEvent(r),e(null,t)}).catch(function(t){console.error(t),e(t)})})}},{key:"triggerEvent",value:function(t){if(this.eventList.has(t)){var e=!0,r=!1,n=void 0;try{for(var o,i=this.eventList.get(t)[Symbol.iterator]();!(e=(o=i.next()).done);e=!0){(0,o.value)()}}catch(t){r=!0,n=t}finally{try{e||null==i.return||i.return()}finally{if(r)throw n}}}}},{key:"on",value:function(t,e){this.eventList.has(t)?this.eventList.get(t).push(e):this.eventList.set(t,[e])}},{key:"of",value:function(t,e){if(this.eventList.has(t))for(var r=this.eventList.get(t),n=0;n<r.length;n++)r[n]===e&&r.splice(n--,1)}}]),c}();exports.default=ServerConnector;
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _customSelector=_interopRequireDefault(require("/js/module/customSelector.js")),_pageController=_interopRequireDefault(require("/js/module/pageController.js")),_popupForm=_interopRequireDefault(require("/js/module/popupForm.js"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,a){return t&&_defineProperties(e.prototype,t),a&&_defineProperties(e,a),e}var TableController=function(){function f(e){var t=e.selector,a=e.pages,n=e.editForm,r=e.block,l=e.loader,o=e.addButton,i=void 0!==o&&o,c=e.schema,s=e.dbLength,d=void 0===s?0:s,u=e.data,h=void 0===u?[]:u,v=e.connector;_classCallCheck(this,f),this.selector=t,this.pages=a,this.editForm=n,this.block=r,this.loader=l,this.addButton=i,this.schema=c,this.dbLength=d,this.data=h,this.SelectorBlock=new _customSelector.default(this.selector),this.pages.maxPages=this.calculatePages(),this.PageControllerBlock=new _pageController.default(this.pages),this.editForm&&(this.editForm.connector=v,this.PopupFormBlock=new _popupForm.default(this.editForm)),this.eventListner=new Map,this.setSelectorEvent(),this.setPageEvent(),this.create()}return _createClass(f,[{key:"create",value:function(){this.createHead(),this.createBody(),this.setAddEvent(),this.triggerTableCreate()}},{key:"calculatePages",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.dbLength,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.SelectorBlock.getSetValue();return Math.ceil(e/t)}},{key:"calculatePadding",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.SelectorBlock.getSetValue();return((1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.PageControllerBlock.CurrentPosition)-1)*e}},{key:"createHead",value:function(){0==this.block.find("thead").length&&this.block.html("<thead></thead>");var e=this.block.find("thead"),t="",a=!0,n=!1,r=void 0;try{for(var l,o=this.schema.columns[Symbol.iterator]();!(a=(l=o.next()).done);a=!0){var i=l.value;t+='<td class="'.concat(i.class||"",'">').concat(i.value,"</td>")}}catch(e){n=!0,r=e}finally{try{a||null==o.return||o.return()}finally{if(n)throw r}}e.html(t)}},{key:"getRelatedData",value:function(e,t){if(!Array.isArray(t))return e[t];var a=e,n=!0,r=!1,l=void 0;try{for(var o,i=t[Symbol.iterator]();!(n=(o=i.next()).done);n=!0){a=a[o.value]||""}}catch(e){r=!0,l=e}finally{try{n||null==i.return||i.return()}finally{if(r)throw l}}return a}},{key:"createBody",value:function(e){this.block.find("tbody").html(this.generateBody(e))}},{key:"addToBody",value:function(e){this.block.find("tbody").append(this.generateBody([e]))}},{key:"deleteFromBody",value:function(e){e.remove()}},{key:"updateBody",value:function(e,t){for(var a=this.schema.columns,n=0;n<a.length;n++)a[n].relatedData&&e.find("td:eq(".concat(n,")")).text(this.getRelatedData(t,a[n].relatedData))}},{key:"generateBody",value:function(){var i=this,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.data;if(void 0!==e&&0!==e.length){var t="relatedElement",a=function(e,t,a,n){if(a.autoIncrement)return t+1;if(a.buttons){for(var r="",l=0;l<a.buttons.length;l++){var o=n.buttons[a.buttons[l]];r+='<div class="'.concat(o.class,'" data-action="').concat(o.action,'">').concat(o.name,"</div>")}return r}return a.relatedData?i.getRelatedData(e,a.relatedData):void 0};0==this.block.find("tbody").length&&this.block.html("<tbody></tbody>");for(var n,r=document.createDocumentFragment(),l=0;l<e.length;l++){var o=e[l],c="";(n=document.createElement("tr"))[t]=o;var s=!0,d=!1,u=void 0;try{for(var h,v=this.schema.columns[Symbol.iterator]();!(s=(h=v.next()).done);s=!0){var f=h.value;c+='<td class="'.concat(f.class||"",'" ').concat(f.relatedData?'data-title="'.concat(f.value,'"'):"",">").concat(a(o,l,f,this.schema),"</td>")}}catch(e){d=!0,u=e}finally{try{s||null==v.return||v.return()}finally{if(d)throw u}}n.innerHTML=c,this.setBtnEvent($(n),"data-action",t),r.appendChild(n)}return r}}},{key:"normalizeTable",value:function(){for(var t=this.block.find("tbody"),e=this.schema.columns,a=0;a<e.length;a++)e[a].autoIncrement&&function(){var e=1;t.find("tr > td:first-child").each(function(){$(this).text(e++)})}()}},{key:"triggerEvent",value:function(e){if(this.eventListner.has(e)){for(var t=arguments.length,a=new Array(1<t?t-1:0),n=1;n<t;n++)a[n-1]=arguments[n];var r=!0,l=!1,o=void 0;try{for(var i,c=this.eventListner.get(e)[Symbol.iterator]();!(r=(i=c.next()).done);r=!0){i.value.apply(void 0,a)}}catch(e){l=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(l)throw o}}}}},{key:"triggerGetEvent",value:function(e,t,a){this.eventListner.has("get")&&(this.block.addClass("loading"),this.triggerEvent("get",{length:e,padding:t},a))}},{key:"setAddEvent",value:function(){var a=this;this.addButton&&this.addButton.on("click",function(){a.PopupFormBlock.open("add",function(e,t){if(e)return!1;a.triggerEvent("add",t,function(){a.addEventCallBack.apply(a,arguments)})})})}},{key:"setBtnEvent",value:function(e,t,a){var n=this;e.on("click","[".concat(t,"]"),function(e){var t=e.target.dataset.action;switch(t){case"edit":n.setEditHandler(e,t,a);break;case"delete":n.setDeleteHandler(e,a)}})}},{key:"setEditHandler",value:function(n,e,r){var l=this,t=JSON.parse(JSON.stringify(n.delegateTarget[r]));this.PopupFormBlock.open(e,t,function(e,t){if(e)return!1;l.triggerEvent("edit",t,function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];l.editEventCallBack.apply(l,t.concat([n.delegateTarget,r]))})})}},{key:"setDeleteHandler",value:function(n,e){var r=this;this.triggerEvent("delete",n.delegateTarget[e],function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];r.deleteEventCallBack.apply(r,t.concat([n.delegateTarget]))})}},{key:"setSelectorEvent",value:function(){var t=this;this.SelectorBlock.subscribe(function(e){t.triggerGetEvent(e,t.calculatePadding(e,t.calculatePages(void 0,e)),function(){t.getEventCallBack.apply(t,arguments),t.PageControllerBlock.setPageBlock(void 0,t.calculatePages())})})}},{key:"setPageEvent",value:function(){var n=this;this.PageControllerBlock.subscribe(function(e,a){n.triggerGetEvent(n.SelectorBlock.getSetValue(),n.calculatePadding(void 0,e),function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(e)return n.getEventCallBack(e),a(e),!1;n.getEventCallBack(e,t),a(e,n.calculatePages())})})}},{key:"getEventCallBack",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(this.block.removeClass("loading"),e||void 0===t.dbLength)return!1;this.dbLength=t.dbLength,this.createBody(t.data)}},{key:"addEventCallBack",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(e)return!1;this.dbLength+=1,this.addToBody(t),this.normalizeTable()}},{key:"editEventCallBack",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},a=2<arguments.length?arguments[2]:void 0;a[3<arguments.length?arguments[3]:void 0]=t,this.updateBody($(a),t)}},{key:"deleteEventCallBack",value:function(e){1<arguments.length&&void 0!==arguments[1]&&arguments[1];var t=2<arguments.length?arguments[2]:void 0;if(e)return!1;this.dbLength-=1,this.deleteFromBody(t),this.normalizeTable()}},{key:"triggerTableCreate",value:function(){this.loader&&(this.loader.wrapperLoader.addClass("loaded"),this.loader.wrapperTable.addClass("loaded"))}},{key:"on",value:function(e,t){this.eventListner.has(e)?this.eventListner.get(e).push(t):this.eventListner.set(e,[t])}},{key:"off",value:function(e,t){if(eventListner.has(e))for(var a=this.eventListner.get(e),n=0;n<a.length;n++)a[n]===t&&a.splice(n--,1)}}]),f}();exports.default=TableController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
